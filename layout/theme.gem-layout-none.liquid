{% comment %}
	GEMPAGE BUILDER (https://apps.shopify.com/gempage)

	You SHOULD NOT modify source code in this page because
	It is automatically generated from GEMPAGE BUILDER
	Try to edit page with the live editor.
{% endcomment %}
<!doctype html>
<html class="no-js" lang="{{ request.locale.iso_code }}">
<head>
<script>
/* >> TriplePixel :: start*/
~function(W,H,A,L,E,_){function O(T,R){void 0===R&&(R=!1),H=new XMLHttpRequest,H.open("GET","//triplewhale-pixel.web.app/triplepx.txt?"+~(Date.now()/9e7),!0),H.send(null),H.onreadystatechange=function(){4===H.readyState&&200===H.status?setTimeout(function(){return eval(H.responseText)},50):(299<H.status||H.status<200)&&T&&!R&&(R=!0,O(T-1))}}if(L=window,!L[H+"sn"]){L[H+"sn"]=1;try{A.setItem(H,1+(0|A.getItem(H)||0)),W.includes("â‡ˆ")&&A.setItem(H+"Stg",1+(0|A.getItem(H+"Stg")||0)),(E=JSON.parse(A.getItem(H+"U")||"[]")).push(location.href),A.setItem(H+"U",JSON.stringify(E))}catch(e){}A.getItem('"!nC`')||(A=L,A[H]||(L=function(){return Date.now().toString(36)+"_"+Math.random().toString(36)},E=A[H]=function(t,e){return W=L(),(E._q=E._q||[]).push([W,t,e]),E._headless=!0,W},E.ch=W,O(5)))}}("","TriplePixel",localStorage);
/* << TriplePixel :: end*/
</script>





  <!-- Showcase 5.0.3 -->

  <link rel="preload" href="{{ 'styles.css' | asset_url }}" as="style">

  {% render 'head-tag' %}
  {%- assign base_font = settings.type_base_font -%}
  {%- assign base_font_medium = base_font | font_modify: 'weight', '500' -%}
  {%- assign base_font_semibold = base_font | font_modify: 'weight', '600' -%}
  {%- if base_font_medium -%}<link rel="preload" as="font" href="{{ base_font_medium | font_url }}" type="font/woff2" crossorigin>{%- endif -%}
  {%- if base_font_semibold -%}<link rel="preload" as="font" href="{{ base_font_semibold | font_url }}" type="font/woff2" crossorigin>{%- endif -%}

  <meta name="theme-color" content="{{ settings.col_btn_bg }}">

  <title>
    {{ page_title }}{% if current_tags %}{% assign meta_tags = current_tags | join: ', ' %} &ndash; {{ 'general.meta.tags' | t: tags: meta_tags }}{% endif %}{% if current_page != 1 %} &ndash; {{ 'general.meta.page' | t: page: current_page }}{% endif %}{% unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless %}
  </title>

  {% render 'social-meta-tags' %}

  {{ 'styles.css' | asset_url | stylesheet_tag }}

  {{ content_for_header }}

  <script>
    document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
    window.theme = window.theme || {};
    theme.money_format = {{ shop.money_format | json }};
    theme.money_container = '.theme-money';
    theme.strings = {
      previous: {{ 'general.accessibility_labels.previous' | t | json }},
      next: {{ 'general.accessibility_labels.next' | t | json }},
      close: {{ 'general.accessibility_labels.close' | t | json }},
      addressError: {{ 'map.errors.address_error' | t | json }},
      addressNoResults: {{ 'map.errors.address_no_results' | t | json }},
      addressQueryLimit: {{ 'map.errors.address_query_limit_html' | t | json }},
      authError: {{ 'map.errors.auth_error' | t | json }},
      back: {{ 'layout.navigation.back' | t | json }},
      cartConfirmation: {{ 'cart.terms.confirmation' | t | json }},
      loadMore: {{ 'general.accessibility_labels.load_more' | t | json }},
      infiniteScrollNoMore: {{ 'collections.general.infinite_scroll_no_more' | t | json }},
      priceNonExistent: {{ 'products.variant.non_existent' | t | json }},
      buttonDefault: {{ 'products.product.add_to_cart' | t | json }},
      buttonNoStock: {{ 'products.variant.out_of_stock' | t | json }},
      buttonNoVariant: {{ 'products.variant.non_existent' | t | json }},
      variantNoStock: {{ 'products.variant.no_stock' | t | json }},
      unitPriceSeparator: {{ 'products.product.unit_price_separator' | t | json }},
      colorBoxPrevious: {{ 'general.lightbox.previous' | t | json }},
      colorBoxNext: {{ 'general.lightbox.next' | t | json }},
      colorBoxClose: {{ 'general.lightbox.close' | t | json }},
      navigateHome: {{ 'layout.navigation.home' | t | json }},
      productAddingToCart: {{ 'products.product.adding_to_cart' | t | json }},
      productAddedToCart: {{ 'products.product.added_to_cart' | t | json }},
      popupWasAdded: {{ 'products.product.popup_was_added' | t | json }},
      popupCheckout: {{ 'products.product.popup_checkout' | t | json }},
      popupContinueShopping: {{ 'products.product.popup_continue_shopping' | t | json }},
      onlyXLeft: {{ 'products.labels.only_x_left' | t: quantity: '[[ quantity ]]' | json }},
      priceSoldOut: {{ 'products.labels.sold_out' | t | json }},
      loading: {{ 'products.listing.loading' | t | json }},
      viewCart: {{ 'layout.cart_summary.cart' | t | json }},
      page: {{ 'general.meta.page' | t | json }},
      imageSlider: {{ 'general.slider.images' | t | json }},
      clearAll: {{ 'collections.filtering.clear_all' | t | json }}
    };
    theme.routes = {
      root_url: '{{ routes.root_url }}',
      cart_url: '{{ routes.cart_url }}',
      cart_add_url: '{{ routes.cart_add_url }}',
      checkout: '/checkout'
    };
    theme.settings = {
      productImageParallax: {{ settings.animation_parallax_prod_image | json }},
      animationEnabledDesktop: {{ settings.animation_enabled_desktop | json }},
      animationEnabledMobile: {{ settings.animation_enabled_mobile | json }}
    };

    theme.checkViewportFillers = function(){
      var toggleState = false;
      var elPageContent = document.getElementById('page-content');
      if(elPageContent) {
        var elOverlapSection = elPageContent.querySelector('.header-overlap-section');
        if (elOverlapSection) {
          var padding = parseInt(getComputedStyle(elPageContent).getPropertyValue('padding-top'));
          toggleState = ((Math.round(elOverlapSection.offsetTop) - padding) === 0);
        }
      }
      if(toggleState) {
        document.getElementsByTagName('body')[0].classList.add('header-section-overlap');
      } else {
        document.getElementsByTagName('body')[0].classList.remove('header-section-overlap');
      }
    };

    theme.assessAltLogo = function(){
      var elsOverlappers = document.querySelectorAll('.needs-alt-logo');
      var useAltLogo = false;
      if(elsOverlappers.length) {
        var elSiteControl = document.querySelector('#site-control');
        var elSiteControlInner = document.querySelector('#site-control .site-control__inner');
        var headerMid = elSiteControlInner.offsetTop + elSiteControl.offsetTop + elSiteControlInner.offsetHeight / 2;
        Array.prototype.forEach.call(elsOverlappers, function(el, i){
          var thisTop = el.getBoundingClientRect().top;
          var thisBottom = thisTop + el.offsetHeight;
          if(headerMid > thisTop && headerMid < thisBottom) {
            useAltLogo = true;
            return false;
          }
        });
      }
      if(useAltLogo) {
        document.getElementsByTagName('body')[0].classList.add('use-alt-logo');
      } else {
        document.getElementsByTagName('body')[0].classList.remove('use-alt-logo');
      }
    };
  </script>

<!--Gem_Page_Header_Script-->
{% include 'gem-app-header-scripts' %}
<!--End_Gem_Page_Header_Script-->
</head>

<body>
<div class="gem-container">
	{{ content_for_layout }}
</div><!-- end .gem-container -->
<!--Gem_Page_Footer_Script-->
{% include 'gem-app-footer-scripts' %}
<!--End_Gem_Page_Footer_Script-->
  
  <!-- Klaviyo tracking code -->
  {% if template contains 'product' %}
  <script type="text/javascript">
    var _learnq = _learnq || [];
    var item = {
      Name: {{ product.title|json }},
      ProductID: {{ product.id|json }},
      Categories: {{ product.collections|map:'title'|json }},
      ImageURL: "https:{{ product.featured_image.src|img_url:'grande' }}",
      URL: "{{ shop.secure_url }}{{ product.url }}",
      Brand: {{ product.vendor|json }},
      Price: {{ product.price|money|json }},
      CompareAtPrice: {{ product.compare_at_price_max|money|json }}
    };
    _learnq.push(['track', 'Viewed Product', item]);
    _learnq.push(['trackViewedItem', {
      Title: item.Name,
      ItemId: item.ProductID,
      Categories: item.Categories,
      ImageUrl: item.ImageURL,
      Url: item.URL,
      Metadata: {
        Brand: item.Brand,
        Price: item.Price,
        CompareAtPrice: item.CompareAtPrice
      }
    }]);
  </script>
  <script type="text/javascript">
    var _learnq = _learnq || [];
    var classname = document.getElementsByClassName("gf_add-to-cart");
    var addToCart = function() {
    _learnq.push(['track', 'Added to Cart', item]);
    }; for (var i = 0; i < classname.length; i++) {
    	classname[i].addEventListener('click', addToCart, false);
    }
  </script>
  {% endif %}
</body>
</html>
